---
rules:
  - bean: java.lang:type=ClassLoading
    unit: "1"
    prefix: jvm.classes.
    type: gauge
    mapping:
      LoadedClassCount:
        metric: loaded
        desc: Number of loaded classes
  - bean: java.lang:type=GarbageCollector,*
    prefix: jvm.gc.collections.
    type: counter
    metricAttribute:
      name: param(name)
    mapping:
      CollectionCount:
        metric: count
        unit: "1"
        desc: Total number of collections that have occurred
      CollectionTime:
        metric: elapsed
        unit: ms
        desc: The approximate accumulated collection elapsed time in milliseconds
  - bean: java.lang:type=Memory
    unit: by
    prefix: jvm.memory.
    type: gauge
    mapping:
      HeapMemoryUsage.init:
        metric: heap.init
        desc: The initial amount of memory that the JVM requests from the operating system for the heap
      HeapMemoryUsage.used:
        metric: heap.used
        desc: The current heap usage
      HeapMemoryUsage.committed:
        metric: heap.committed
        desc: The amount of memory that is guaranteed to be available for the heap
      HeapMemoryUsage.max:
        metric: heap.max
        desc: The maximum amount of memory can be used for the heap
      NonHeapMemoryUsage.init:
        metric: nonheap.init
        desc: The initial amount of memory that the JVM requests from the operating system for non-heap purposes
      NonHeapMemoryUsage.used:
        metric: nonheap.used
        desc: The current non-heap memory usage
      NonHeapMemoryUsage.committed:
        metric: nonheap.committed
        desc: The amount of memory that is guaranteed to be available for non-heap purposes
      NonHeapMemoryUsage.max:
        metric: nonheap.max
        desc: The maximum amount of memory can be used for non-heap purposes
  - bean: java.lang:type=MemoryPool,*
    unit: by
    prefix: jvm.memory.pool.
    type: gauge
    metricAttribute:
      name: param(name)
    mapping:
      Usage.init:
        metric: init
        desc: The initial amount of memory that the JVM requests from the operating system for the memory pool
      Usage.used:
        metric: used
        desc: The current memory pool memory usage
      Usage.committed:
        metric: committed
        desc: The amount of memory that is guaranteed to be available for the memory pool
      Usage.max:
        metric: max
        desc: The maximum amount of memory can be used for the memory pool
  - bean: java.lang:type=OperatingSystem
    type: gauge
    mapping:
      TotalSwapSpaceSize:
        metric: jvm.memory.total.swap.space.size
        desc: The host swap memory size in bytes
        unit: by
      FreeSwapSpaceSize:
        metric: jvm.memory.free.swap.space.size
        desc: The amount of available swap memory in bytes
        unit: by
      TotalPhysicalMemorySize:
        metric: total.physical.memory.size
        desc: The total physical memory size in host
        unit: by
      FreePhysicalMemorySize:
        metric: free.physical.memory.size
        desc: The amount of free physical memory in host
        unit: by
      OpenFileDescriptorCount:
        metric: open.file.descriptor.count
        desc: The number of opened file descriptors
        unit: "1"
      AvailableProcessors:
        metric: available.processors
        desc: The number of available processors
        unit: "1"
      SystemCpuLoad:
        metric: jvm.system.cpu.utilization
        desc: The current load of CPU in host
        unit: "1"
      ProcessCpuLoad:
        metric: jvm.cpu.recent_utilization
        desc: The current load of CPU in process
        unit: "1"
  - bean: java.lang:type=Threading
    unit: "1"
    prefix: jvm.threads.
    type: gauge
    mapping:
      ThreadCount:
        metric: count
        desc: Number of threads
      DaemonThreadCount:
        metric: daemon
        desc: Number of daemon threads
